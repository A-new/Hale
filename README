How to add modules, the current module API work as follow:

1) Implement module, for example:

import moduleManager
from utils import moduleInterface

@moduleManager.register("irc")
def module_setup(config):
    """
    Function to register modules, simply
    implement this to pass along the config
    to the module object and return it back
    """
    
    return IRC(config)

# must inherit from Module class
class IRC(moduleInterface.Module):

   def __init__(self, config):
       self.config = config
   
   # must be implemented
   def stop(self):
       # stop execution
   
   # must be implemented
   def run(self):
       # start execution
   
   # must be implemented    
   def getConfig(self):
       return self.config

Add decorator for the register function (in this case module_setup)
which will be called with the current configuration as argument. This 
function can be named anything. Pass along the configurations to the 
module object, the configHandler catches KeyErrors so if wrong 
configurations are sent to this function configHandler will notify 
you about it. 

Also follow the naming convention nameModule.py and @moduleManager.register("name") 
and import the moduleManager, if not the moduleManager will notify 
you about any errors.

Catch all possible exceptions and send them to the module coordinator
error bucket which takes care of all errors from every module running 
in the monitor system. These errors can be shown with the 'showlog' command
in the CLI

2) Drag the file to the modules directory. The moduleManager will
then automatically import it and check for errors.

3) In modules.conf edit the configuration, in this case:

# specify unique configs for module
[uniqueKeys]
irc = botnet, pass_grammar, ... etc
# name a section, can be anything as long as its unique
# and add module regname (in this case irc) as module option
[myIrcConf]
module = irc
nick = SpyBot
channel = #irc
...
etc.

Feeder bot HOWTO:

When sending a request for a botnet to track the request is made as follow

trackReq hash

where the hash value is made of the unique keys in the module configuration
sorted alphabetically. If there is a sensor already monitoring this botnet
then an answer will be made

trackAck hash

The feeder should wait/sleep some time to let the sensors respond to the request.
If no such answer is made after waiting then the bot can send the command to start
tracking a botnet, a sensor that is ready to handle it will take care of it. The
command is issued as follow

startTrack config

where config is a string representation of the configuration, for example

module=irc botnet=irc.freenode.net etc..

To find out if any sensor has taken the job to monitor this request, issue a trackReq
with the same hash used prior to sending the startTrack. If an acknowledgment is made
then the request was sucessfully executed. 
